// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type AssignUser struct {
	UserID string `json:"userId"`
	Role   int    `json:"role"`
}

type NewOrganisation struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type NewUser struct {
	FirstName      string  `json:"firstName"`
	LastName       string  `json:"lastName"`
	Email          string  `json:"email"`
	Password       string  `json:"password"`
	OrganisationID *string `json:"organisationId"`
	Role           int     `json:"Role"`
}

type Organisation struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	UserPoolID  string  `json:"userPoolId"`
	WorkerLimit int     `json:"workerLimit"`
	UserLimit   int     `json:"userLimit"`
	Disabled    *bool   `json:"disabled"`
	CreatedAt   int     `json:"created_at"`
	UpdatedAt   *int    `json:"updated_at"`
}

type OrganisationUsers struct {
	OrganisationID *string `json:"organisationId"`
	UserID         *string `json:"userId"`
}

type Token struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ExpiredAt    int    `json:"expiredAt"`
}

type User struct {
	ID             string  `json:"id"`
	FirstName      string  `json:"firstName"`
	LastName       string  `json:"lastName"`
	Email          string  `json:"email"`
	Password       string  `json:"password"`
	OrganisationID *string `json:"organisationId"`
	CreatedAt      int     `json:"created_at"`
	UpdatedAt      *int    `json:"updatedAt"`
	Disabled       *bool   `json:"disabled"`
	Role           *int    `json:"role"`
}

type Role string

const (
	RoleAdmin              Role = "Admin"
	RoleOrganisationAdmin  Role = "OrganisationAdmin"
	RoleOrganisationWorker Role = "OrganisationWorker"
	RoleBaseUser           Role = "BaseUser"
)

var AllRole = []Role{
	RoleAdmin,
	RoleOrganisationAdmin,
	RoleOrganisationWorker,
	RoleBaseUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleOrganisationAdmin, RoleOrganisationWorker, RoleBaseUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
